@page "/"
@inject  HttpClient Http;
@inject IModalService Modal
<head>
  <base href="~/" />
<style>
.card {display:inline-flex;}
.rating {
  display: inline-block;
  unicode-bidi: bidi-override;
  color: #888888;
  font-size: 25px;
  height: 25px;
  width: auto;
  margin: 0 auto;
  position: relative;
  padding: 0;
  text-align: right;
}

.rating-upper {
  color: #c52b2f;
  padding: 0;
  position: absolute;
  z-index: 1;
  display: flex;
  top: 0;
  left: 0;
  overflow: hidden;
}

.rating-lower {
  padding: 0;
  display: flex;
  z-index: 0;
}
</style>
</head>
@if (_movies != null)
{   
    <div class="card-groupsssssss" >
    @foreach (var movie in _movies)
    {
    <div class="card" style="width: 18rem;">
    <img src= "@movie.ImageURL"  class="card-img-top" alt="x...">
    
    <div class="card-body">
    <h5 class="card-title">@movie.Title</h5>
    <p class="card-text">@movie.Description</p>
    <br>
    <div class="rating">
    <div class="rating-upper" style="width: @(Math.Round(movie.Rating*20))%" > 
        <span>★</span>
        <span>★</span>
        <span>★</span>
        <span>★</span>
        <span>★</span>
    </div>
    <div class="rating-lower">
        <span>★</span>
        <span>★</span>
        <span>★</span>
        <span>★</span>
        <span>★</span>
    </div>
</div>
    </div>
    <div class="card-footer">
            <button @onclick="@(() => ShowMovieReview(movie))" class="btn btn-primary">Review</button>
            <button @onclick="@(() => RentMovie(movie))" class="btn btn-primary">Rent</button>
            <button @onclick="@(() => AddTrivia(movie))" class="btn btn-primary">Add Trivia</button>
            <button @onclick="@(() => EditMovie(movie))" class="btn btn-warning">Edit</button>
            <button @onclick="@(() => DeleteMovie(movie))" class="btn btn-danger">Delete</button>
        </div>
    </div>
    }
    </div>
}
else{
    <p>Couldnt be loaded</p>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
@code{
    private Movie[] _movies;
    protected override async Task OnInitializedAsync()
    {
        _movies = await Http.GetJsonAsync<Movie[]>("http://localhost:4000/api/movies");
        foreach (var movie in _movies)
        {
            var reviews = await Http.GetJsonAsync<Review[]>("http://localhost:4000/api/reviews");

            reviews = reviews.Where(x => x.MovieId == movie.Id).ToArray();
            if (reviews.Length == 0)
            {
                movie.Rating = 0;
            }
            else
            {
                movie.Rating = reviews.Sum(x => x.Rating) / Convert.ToDouble(reviews.Length);
            }
        }
    }
    void AddTrivia(Movie movie)
      {
        var parameters = new ModalParameters();
        parameters.Add("Movie", movie);
        Modal.Show<AddTrivia>("Adding Trivia", parameters);
      }
    void ShowMovieReview(Movie movie)
    {
        var parameters = new ModalParameters();
        parameters.Add("Movie", movie);

        Modal.Show<MovieReview>("Post Review for: " + movie.Title, parameters);
    }
    void SearchForMovie()
    {

    }
    void DeleteMovie(Movie movie)
    {
        var parameters = new ModalParameters();
        parameters.Add("Movie", movie);

        Modal.Show<DeleteMovie>("Deleting " + movie.Title, parameters);
    }
    void EditMovie(Movie movie)
    {
        var parameters = new ModalParameters();
        parameters.Add("Movie", movie);

        Modal.Show<EditMovie>("Editing " + movie.Title, parameters);
    }
    void RentMovie(Movie movie)
    {
        var parameters = new ModalParameters();
        parameters.Add("Movie", movie);

        Modal.Show<RentMovie>("Renting " + movie.Title, parameters);
    }
}
